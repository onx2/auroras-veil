use crate::progression::{MAX_LEVEL, XpProgression, xp_progression};
use spacetimedb::{ReducerContext, Table};

pub fn seed(ctx: &ReducerContext) {
    if ctx.db.xp_progression().iter().next().is_none() {
        let mut total_xp: u32 = 0;

        for level in 1..=MAX_LEVEL {
            let (base_xp, exponent) = match level {
                1 => (0.0, 1.0),
                2..=10 => (100.0, 1.2),
                11..=20 => (200.0, 1.4),
                21..=30 => (300.0, 1.6),
                31..=40 => (400.0, 1.8),
                41..=50 => (500.0, 2.0),
                _ => unreachable!("Max level is 50"),
            };

            let xp_to_level = ((level as f64).powf(exponent) * base_xp).round() as u32;
            total_xp += xp_to_level;

            ctx.db.xp_progression().insert(XpProgression {
                level,
                total_xp: total_xp,
            });
        }
    }
}

// Level  |        Total XP |  XP required for level
// -------------------------------------------------
// 1      |               0 |                      0
// 2      |             230 |                    230
// 3      |             604 |                    374
// 4      |           1,132 |                    528
// 5      |           1,822 |                    690
// 6      |           2,681 |                    859
// 7      |           3,714 |                  1,033
// 8      |           4,927 |                  1,213
// 9      |           6,324 |                  1,397
// 10     |           7,909 |                  1,585
// 11     |          13,650 |                  5,741
// 12     |          20,135 |                  6,485
// 13     |          27,389 |                  7,254
// 14     |          35,436 |                  8,047
// 15     |          44,299 |                  8,863
// 16     |          54,000 |                  9,701
// 17     |          64,560 |                 10,560
// 18     |          76,000 |                 11,440
// 19     |          88,339 |                 12,339
// 20     |         101,597 |                 13,258
// 21     |         140,742 |                 39,145
// 22     |         182,911 |                 42,169
// 23     |         228,189 |                 45,278
// 24     |         276,657 |                 48,468
// 25     |         328,397 |                 51,740
// 26     |         383,488 |                 55,091
// 27     |         442,008 |                 58,520
// 28     |         504,034 |                 62,026
// 29     |         569,642 |                 65,608
// 30     |         638,907 |                 69,265
// 31     |         832,331 |                193,424
// 32     |       1,037,131 |                204,800
// 33     |       1,253,595 |                216,464
// 34     |       1,482,009 |                228,414
// 35     |       1,722,657 |                240,648
// 36     |       1,975,822 |                253,165
// 37     |       2,241,786 |                265,964
// 38     |       2,520,829 |                279,043
// 39     |       2,813,228 |                292,399
// 40     |       3,119,261 |                306,033
// 41     |       3,959,761 |                840,500
// 42     |       4,841,761 |                882,000
// 43     |       5,766,261 |                924,500
// 44     |       6,734,261 |                968,000
// 45     |       7,746,761 |              1,012,500
// 46     |       8,804,761 |              1,058,000
// 47     |       9,909,261 |              1,104,500
// 48     |      11,061,261 |              1,152,000
// 49     |      12,261,761 |              1,200,500
// 50     |      13,511,761 |              1,250,000
